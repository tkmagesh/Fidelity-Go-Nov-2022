Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (15 mins)
    Lunch Break : 1:00 PM (1 hour)
    Tea Break   : 3:30 PM (15 mins)
    Wind up     : 5:30 PM

Methodology:
    * No Powerpoint
    * 100% hands on driven

Software Requirements:
    * Go tools (https://go.dev/dl)
    * Visual Studio Code (https://code.visualstudio.com)

Why Golang?
    * Simplicity
        Only 25 keywords
        - No access modifier
        - No classes (only structs)
        - No inheritance (only composition)
        - No exceptions (only errors)
        - No "try catch finally" (errors are simple values)
        - No reference types (everything is a value in Go)
        - No pointer arithmetic
        - No implicit type conversions (every type conversion has to be explicit)
    * Close to hardware
        - high performance (equivalent to C++)
        - No VM ( JVM / CLR )
        - Cross compilation
    * Concurrency
        - Concurrency features are built in the language
            go keyword, channel data type, channel operator ( <- ), range & select constructs
        - Standard Library APIs
            * sync package
            * sync/atomic package 

What is Concurrency?
    * Ability to have more than one execution path

    * Cooperative Multitasking
    * Preemptive Multitasking
    

Running a go program
    go run <program.go>

Creating a build
    go build <program.go>
    go build -o <build_name> <program.go>

Get the List of environment variables (go tools)
    go env

To get the list of GOOS/GOARCH combination suppored 
    go tool dist list

To change the environment variables
    go env -w <env-1>=<val-1> <env-2>=<val-2>
    ex: go env -w GOOS=windows GOARCH=386

To cross compile 
    GOOS=<target_os> GOARCH=<target_arch> go build -o <build_name> <program.go>
    ex: GOOS=windows GOARCH=386 go build 01-hello-world.go

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 [ real(float32) + imaginary(float32) ]
    complex128 [ real(float64) + imaginary(float64) ]

    byte (alias for uint8)
    rune (alias for int32) (unicode character code point)

Constructs
    if else
    switch case
    for

functions
    - variadic functions
    - anonymous functions
    - higher order functions (functions as first class objects)
        - assign functions to variables
        - pass functions as arguments 
        - return functions as return values

Errors
    Just values returned from functions
    Any value that implements the "error" interface
    Creating errors
        errors.New()
        fmt.Errorf()

Collections
    Array
        fixed size collection of data of the same type

    Slice
        varying size collection of data of the same type
        
    Map
        collection of key/value pairs

Modularity
    Module => application
        A folder with go.mod file
    Package => internal organization of the application
        Folder with go files

        
    To create a module
        go mod init <module_name>
            advisable : module_name === repository path of the module
            contains the module name, go version, dependencies info

        go run .
    To run a module

    To create a build
        go build .
        go build -o <binary_name> .

    To install a 3rd party package
        go get <package_name>
        ex: go get github.com/fatih/color

    To update a 3rd party package
        go get -u <package_name>

    To update the go.mod file
        go mod tidy

    Module cache (by default, all 3rd party modules are downloaded here)
        $GOPATH/pkg

    To localize the dependencies (for the application)
        go mod vendor

    to install as an executable ($GOPATH/bin)
        go install <module_name>
        OR
        go install .

    Other useful commands
        go mod graph
        go mod why <module>

OOP
    Structs
        Alternative for classes in golang
        inheritance is achieved using composition

Concurrency
    - DO NOT assume the sequence in which the goroutines are executed
    - DO NOT assume the time taken for a goroutine to complete

    To detect race conditions
        go run --race <program.go>
    
    To create a build with race detector (DO NOT do this in production build)
        go build --race <program.go>